package com.intellij;

import com.couchbase.client.java.Cluster;
import com.intellij.executor.ExecutionResult;
import com.intellij.resultset.CouchbaseListResultSet;
import org.jetbrains.annotations.NotNull;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Properties;

import static com.intellij.executor.CouchbaseCustomStatementExecutor.tryExecuteDdlStatement;
import static java.lang.Math.max;

public class CouchbaseStatement extends CouchbaseBaseStatement {
    CouchbaseStatement(@NotNull Cluster cluster, @NotNull Properties properties, boolean isReadOnly) {
        super(cluster, properties, isReadOnly);
    }

    @Override
    public ResultSet executeQuery(@NotNull String sql) throws SQLException {
        checkClosed();
        execute(sql);
        if (result == null) {
            throw new SQLException("No result set");
        }
        return result;
    }

    CouchbaseListResultSet executeMetaQuery(@NotNull String sql) throws SQLException {
        checkClosed();
        try {
            return new CouchbaseListResultSet(cluster.query(sql, makeQueryOptions()));
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public int executeUpdate(@NotNull String sql) throws SQLException {
        checkClosed();
        execute(sql);
        return max(0, getUpdateCount());
    }

    @Override
    public boolean execute(@NotNull String sql) throws SQLException {
        checkClosed();
        try {
            ExecutionResult executionResult = tryExecuteDdlStatement(cluster, sql, isReadOnly);
            if (executionResult.isSuccess()) {
                ResultSet resultSet = executionResult.getResultSet();
                setNewResultSet(resultSet);
                return resultSet != null;
            }
            return executeInner(cluster.reactive().query(sql, makeQueryOptions()));
        } catch (Throwable t) {
            throw new SQLException(t);
        }
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        checkClosed();
        return result;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void clearBatch() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }
}
